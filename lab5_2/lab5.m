clear
clc
close all;
deg = pi/180;
LinkLength1 = 1;
LinkLength2 = 1;
LinkLength3 = 1;

%Links adjusting

L(1) = Revolute('d', LinkLength1, 'a', 0, 'alpha', pi/2, ...
    'I', [0, 0, 0], ...
    'm', 0, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-180 180]*deg);
L(2) = Revolute('d', 0, 'a', LinkLength2, 'alpha', 0,...
    'r', [0.5, 0, 0], ...
    'I', [0.01, 0.8, 0.8], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*deg);
L(3) = Revolute('d', 0, 'a', LinkLength3, 'alpha', 0,...
    'r', [0.5, 0, 0], ...
    'I', [0.01, 0.8, 0.8], ...
    'm', 10, ...
    'Jm', 1e-4, ...
    'G', 500, ...
    'B', 10e-4, ...
    'Tc', 10e-4, ...
    'qlim', [-90 90]*deg);


theRb_l5 = SerialLink (L,'name', 'theRb l5', 'gravity', [0 -9.807 0]);
theRb_l5.model3d = 'UNIMATE/puma560';

home = [0 0 -90*deg];
hold = [0 0 0];

figure
theRb_l5.plot3d(home);
theRb_l5.teach(hold);

theRb_l5.payload(1, [0 0 0]);

jacobian = theRb_l5.jacob0(home);
G = theRb_l5.gravload(home);
torque_home = jacobian.*G

jacobian2 = theRb_l5.jacob0(hold);
G2 = theRb_l5.gravload(hold);
torque_hold = jacobian2.*G2